name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
  workflow_dispatch:
    inputs:
      integration:
        description: Run integration test suite
        required: false
        default: "false"

env:
  PYTHON_VERSION: "3.11"
  INTEGRATION: ${{ github.event.inputs.integration || 'false' }}

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Black formatting
        run: black --check .
      - name: Ruff linting
        run: ruff check .
      - name: Unit tests
        run: pytest -m "not integration"
      - name: pip-audit runtime
        run: pip-audit -r requirements.txt --severity HIGH --strict
      - name: pip-audit dev
        run: pip-audit -r requirements-dev.txt --severity HIGH --strict
      - name: Docker scan (best effort)
        if: always()
        run: |
          docker build -t reconscript-ci .
          if command -v docker &>/dev/null && docker scan --version >/dev/null 2>&1; then
            docker scan --accept-license reconscript-ci || echo "::warning::docker scan reported findings"
          elif command -v trivy >/dev/null 2>&1; then
            trivy image --severity HIGH,CRITICAL reconscript-ci || echo "::warning::trivy scan reported findings"
          else
            echo "::warning::Container scanning tool not available"
        continue-on-error: true

  integration:
    runs-on: ubuntu-latest
    needs: lint-test
    if: env.INTEGRATION == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Integration tests
        env:
          INTEGRATION_SCANME: ${{ secrets.INTEGRATION_SCANME || 'false' }}
        run: pytest -m integration
