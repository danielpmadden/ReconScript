name: Build and Release

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system libraries for PDF export
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            libcairo2 \
            libffi-dev \
            libgdk-pixbuf-2.0-0 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libjpeg-turbo8 \
            libxml2 \
            libxslt1.1 \
            fonts-liberation \
            shared-mime-info

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Prepare artifact directories
        run: |
          mkdir -p build-artifacts/logs
          mkdir -p build-artifacts/test-results

      - name: Run flake8
        run: |
          bash -o pipefail -c "flake8 reconscript | tee build-artifacts/logs/flake8.log"

      - name: Run pytest
        run: |
          bash -o pipefail -c "pytest --maxfail=1 --disable-warnings -q --junitxml=build-artifacts/test-results/junit.xml | tee build-artifacts/logs/pytest.log"

      - name: Build Docker image
        run: |
          bash -o pipefail -c "docker build --build-arg INCLUDE_PDF=true -t reconscript:ci . | tee build-artifacts/logs/docker-build.log"

      - name: Dry-run safety check
        run: |
          bash -o pipefail -c "docker run --rm reconscript:ci --dry-run --target 127.0.0.1 --verbose | tee build-artifacts/logs/docker-dry-run.log"

      - name: Scan container image (Trivy)
        run: |
          bash -o pipefail -c "docker run --rm aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL reconscript:ci | tee build-artifacts/logs/trivy.log"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reconscript-ci-artifacts
          path: build-artifacts

  publish-image:
    runs-on: ubuntu-latest
    needs: [lint-test-build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write
    steps:
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag and push image
        env:
          IMAGE_ID: ghcr.io/${{ github.repository_owner }}/reconscript
        run: |
          VERSION=$(date +'%Y.%m.%d')-${{ github.run_number }}
          docker tag reconscript:ci $IMAGE_ID:$VERSION
          docker tag reconscript:ci $IMAGE_ID:latest
          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:latest
          echo "Published $IMAGE_ID:$VERSION" >> publish.log

      - name: Upload publish log
        uses: actions/upload-artifact@v4
        with:
          name: image-publish-log
          path: publish.log
